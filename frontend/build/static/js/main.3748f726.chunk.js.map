{"version":3,"sources":["WordExtractor.js","App.js","theme.js","index.js"],"names":["HtmlTooltip","withStyles","theme","tooltip","fontFamily","backgroundColor","color","maxWidth","fontSize","typography","pxToRem","border","Tooltip","NormalToken","props","useState","setColor","token","title","Fragment","DictFormHiragana","DictForm","Meaning","className","onMouseOver","onMouseOut","Text","JLPTToken","Typography","Level","ConvertedText","data","inner","sections","out","count","i","length","section","sectionOut","j","tokens","push","key","Box","WordExtractor","initialValue","value","setValue","e","target","useInput","queryText","setQueryText","query","id","querytext","usePostCallback","url","exec","loading","error","my","variant","component","gutterBottom","TextField","label","multiline","rows","fullWidth","onChange","Button","onClick","Copyright","align","Link","href","Date","getFullYear","createMuiTheme","palette","primary","main","secondary","red","A400","background","default","ReactDOM","render","ThemeProvider","CssBaseline","Container","width","document","querySelector"],"mappings":"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","file":"static/js/main.3748f726.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { usePostCallback } from \"use-axios-react\";\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { withStyles } from '@material-ui/core/styles';\n\n/*\nconst HtmlTooltip = (theme => ({\n    tooltip: {\n        fontFamily: 'Arial,sans-serif !important',\n        backgroundColor: '#f5f5f9',\n        color: 'rgba(0, 0, 0, 0.87)',\n        maxWidth: 220,\n        //fontSize: theme.typography.pxToRem(12),\n        border: '1px solid #dadde9',\n    },\n}))(Tooltip);\n\n */\nconst HtmlTooltip = withStyles(theme => ({\n    tooltip: {\n        fontFamily: 'Arial, sans-serif !important',\n        backgroundColor: '#f5f5f9',\n        color: 'rgba(0, 0, 0, 0.87)',\n        maxWidth: 320,\n        fontSize: theme.typography.pxToRem(28),\n        border: '1px solid #dadde9',\n    },\n}))(Tooltip);\n\nfunction useInput(initialValue) {\n    const [value,setValue] = useState(initialValue);\n\n    function handleChange(e){\n        setValue(e.target.value);\n    }\n\n    return [value, handleChange];\n}\n\nconst NormalToken = (props) => {\n    const [color, setColor] = useState(\"white\")\n    const handleMouseOver = () => {\n        setColor(\"blue\")\n    }\n\n    const handleMouseOut = () => {\n        setColor(\"white\")\n    }\n\n    var token = props.token\n    return (\n        <HtmlTooltip\n            title={\n                <React.Fragment>\n                    { token.DictFormHiragana }{' '}<br/>\n                    { token.DictForm }{' '}<br/>\n                    { token.Meaning }{' '}<br/>\n                </React.Fragment>\n            }\n        >\n            <span className={\"vocab\"} onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}><ruby><rb>{token.Text}</rb><rt className={color}>{ token.DictFormHiragana }</rt></ruby></span>\n        </HtmlTooltip>\n    )\n}\n\nconst JLPTToken = (props) => {\n    var token = props.token\n    const [color, setColor] = useState(\"white\")\n\n    const handleMouseOver = () => {\n        setColor(\"blue\")\n    }\n\n    const handleMouseOut = () => {\n        setColor(\"white\")\n    }\n\n    return (\n        <HtmlTooltip\n            title={\n                <React.Fragment>\n                    <Typography color=\"inherit\"></Typography>\n                    N{ token.Level}{' '}<br/>\n                    { token.DictFormHiragana }{' '}<br/>\n                    { token.DictForm }{' '}<br/>\n                    { token.Meaning }{' '}<br/>\n                </React.Fragment>\n            }\n        >\n            <span className={\"jlptn\"+token.Level} onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}><ruby><rb>{token.Text}</rb><rt className={color}>{ token.DictFormHiragana }</rt></ruby></span>\n        </HtmlTooltip>\n    )\n}\n\nfunction div(inner) {\n    return (\n        <div className=\"mb-3\">\n            {inner}\n        </div>\n    )\n}\n\nconst ConvertedText = (data) => {\n    var sections = data.sections\n    var out = []\n    var count = 1\n    if (!sections) {\n        return (\n            <span>Please enter some Japanese text...</span>\n        )\n    }\n    for (var i=0; i<sections.length; i++) {\n        var section = sections[i]\n        var sectionOut = []\n        for (var j=0; j<section.tokens.length; j++) {\n            count = count + 1\n            var token = section.tokens[j]\n            if (token.Level > 0) {\n                sectionOut.push(<JLPTToken key={count} token={token}/>)\n            } else {\n                // case not in JLPT vocabs\n                if (token.Text !== token.DictFormHiragana && token.DictFormHiragana !== \"\") {\n                    sectionOut.push(<NormalToken key={count} token={token}/>)\n                } else {\n                    sectionOut.push(token.Text)\n                }\n            }\n        }\n        out.push(div(sectionOut))\n    }\n    return (\n        <Box className=\"converted\">{out}</Box>\n    )\n}\n\nconst WordExtractor = () => {\n    const [queryText, setQueryText] = useInput(\"\");\n    const query = {id: \"\", querytext: queryText}\n\n    function postQueryRequest({ id, querytext }) {\n        return {\n            url: \"http://jwordlist.com:8081/v1/job\",\n            data: {id, querytext}\n        };\n    }\n\n    /*\n            {error && <Box><code>{JSON.stringify(error)}</code></Box>}\n     */\n\n    const StatusBar = ({loading, error}) => (\n        <span>\n            {loading && <span>Loading...</span>}\n            {error && <span> Error sending requests...</span>}\n        </span>\n    );\n\n    const [exec, loading, {error, data}] = usePostCallback(postQueryRequest);\n    return (\n        <Box my={3}>\n            <Typography variant=\"h3\" component=\"h3\" gutterBottom>\n                jwordlist.com\n            </Typography>\n            <Typography variant=\"h5\" component=\"h5\" gutterBottom>\n                Extract Japanese Vocabulary From Text\n            </Typography>\n            <Box my={3}>\n                <TextField variant=\"filled\" label=\"Enter some Japanese text\" multiline rows=\"10\" fullWidth value={queryText} onChange={setQueryText}/>\n            </Box>\n            <Box my={3}>\n                <Button variant=\"contained\" onClick={() => exec(query)} color=\"primary\">Extract Vocabulary</Button>\n                <StatusBar loading={loading} error={error}/>\n            </Box>\n            {data && <ConvertedText sections={data.sections} />}\n        </Box>\n    )\n}\n\nexport default WordExtractor","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Link from '@material-ui/core/Link';\nimport WordExtractor from './WordExtractor';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"http://jwordlist.com/\">\n        jwordlist.com\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nexport default function App() {\n  return (\n    <Container>\n      <Box my={4} width=\"auto\">\n          <WordExtractor />\n          <Copyright />\n      </Box>\n    </Container>\n  );\n}\n","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport App from './App';\nimport theme from './theme';\nimport './index.css'\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}